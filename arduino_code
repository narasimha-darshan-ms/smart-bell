#include <Keypad.h>
#include <DS3231.h>
#include<LiquidCrystal.h>

boolean reset_flag = false;
char button_pressed;
const byte ROWS = 2;
const byte COLS = 3;
unsigned int i = 0, j, menu_selection = 0, reset_time, reset_DOW, Hour, Min;
char hexaKeys[ROWS][COLS] = {
  {'*', 'A', '#'},
  {'B', 'C', 'D'}
};
String days[7] = { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"};
String DOW, TIME, hours, minutes;
int timings[6][12][2] = {{
    9, 20,
    9, 40,
    10, 20,
    11, 00,
    11, 10,
    11, 50,
    12, 25,
    13, 00,
    13, 30,
    14, 10,
    14, 50,
    15, 30
  },

  { 9, 20,
    9, 40,
    10, 20,
    11, 00,
    11, 10,
    11, 50,
    12, 25,
    13, 00,
    13, 30,
    14, 10,
    14, 50,
    15, 30
  },

  { 9, 20,
    9, 40,
    10, 20,
    11, 00,
    11, 10,
    11, 50,
    12, 25,
    13, 00,
    13, 30,
    14, 10,
    14, 50,
    15, 30
  },

  { 9, 20,
    9, 40,
    10, 20,
    11, 00,
    11, 10,
    11, 50,
    12, 25,
    13, 00,
    13, 30,
    14, 10,
    14, 50,
    15, 30
  },

  { 9, 20,
    9, 40,
    10, 20,
    11, 00,
    11, 10,
    11, 50,
    12, 25,
    13, 00,
    13, 30,
    14, 10,
    14, 50,
    15, 30
  },

  { 9, 20,
    9, 40,
    10, 20,
    11, 00,
    11, 10,
    11, 50,
    12, 25,
    13, 00,
    13, 30,
    14, 10,
    14, 50,
    15, 30
  }
};

byte rowPins[ROWS] = {8, 9};
byte colPins[COLS] = {10, 11, 12};

Keypad customKeypad = Keypad( makeKeymap(hexaKeys), rowPins, colPins, ROWS, COLS);
DS3231  rtc(SDA, SCL);
LiquidCrystal lcd(7, 6, 5, 4, 3, 2);

void setup() {
  Serial.begin(115200);                                
  lcd.begin(16, 2);
  pinMode(A0, OUTPUT);
  rtc.begin();
  lcd.cursor();
}

void loop() {

  DOW = rtc.getDOWStr();
  TIME = rtc.getTimeStr();
  hours = TIME.substring(0, 2);
  minutes = TIME.substring(3, 5);
  Hour = hours.toInt();
  Min = minutes.toInt();
 
  for (j = 0; j < 7; j++)
  {
    if (DOW == days[j])
      break;
  }
  for (i = 0; i < 12; i++)
  {
    if (Hour < timings[j][i][0]) // Min <= timings[j][i][1])
      break;
    else if (Hour == timings[j][i][0] && Min <= timings[j][i][1])
      break;
    }
 
  if (!reset_flag)
  {

    lcd.setCursor(0, 0);
    lcd.print("Next Bell:");
    lcd.setCursor(0, 1);
    lcd.print("      ");
    lcd.setCursor(0, 1);
    lcd.print(String(timings[j][i][0]) + ":" + String(timings[j][i][1]));
  }
  if (Hour == timings[j][i][0] && Min == timings[j][i][1])
  {
    digitalWrite(A0, HIGH);
    delay(10000);
    digitalWrite(A0, LOW);
    delay(60000);
  }
  button_pressed = customKeypad.getKey();
  if (button_pressed != 0)
  {
    if (button_pressed == '*')
    {
      reset_flag = true;
      button();
    }
    else
      action();
  }
}

void button()
{
  menu_selection = 0;
  reset_time = 0;
  reset_DOW = j;
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print(days[reset_DOW]);
  lcd.setCursor(0, 1);
  lcd.print("Slot" + String(reset_time));
  lcd.setCursor(6, 1);
  lcd.print("-");
  lcd.setCursor(8, 1);
  lcd.print(String(timings[reset_DOW][reset_time][0]));
  lcd.setCursor(10, 1);
  lcd.print(":" + String(timings[reset_DOW][reset_time][1]));
}

void action()
{
  if (reset_flag)
  {
    if (button_pressed == 'A')
    {
      if (menu_selection == 0)
      {
        if (reset_DOW < 5)
          reset_DOW++;
        else
          reset_DOW = 0;
        lcd.setCursor(0, 0);
        lcd.print("              ");
        lcd.setCursor(0, 0);
        lcd.print(days[reset_DOW]);
      }
      if (menu_selection == 1)
      {
        if (reset_time < 11)
          reset_time++;
        else
          reset_time = 0;
        lcd.setCursor(4, 1);
        lcd.print("  ");
        lcd.setCursor(4, 1);
        lcd.print(String(reset_time));
      }
      if (menu_selection == 2)
      {
        if (timings[reset_DOW][reset_time][0] < 23)
          timings[reset_DOW][reset_time][0]++;
        else
          timings[reset_DOW][reset_time][0] = 0;
        lcd.setCursor(8, 1);
        lcd.print("  ");
        lcd.setCursor(8, 1);
        lcd.print(String(timings[reset_DOW][reset_time][0]));
      }
      if (menu_selection == 3)
      {
        if (timings[reset_DOW][reset_time][1] < 59)
          timings[reset_DOW][reset_time][1]++;
        else
          timings[reset_DOW][reset_time][1] = 0;
        lcd.setCursor(11, 1);
        lcd.print("  ");
        lcd.setCursor(11, 1);
        lcd.print(String(timings[reset_DOW][reset_time][1]));
      }
    }
    else if (button_pressed == 'C')
    {
      if (menu_selection == 0)
      {
        if (reset_DOW > 0)
          reset_DOW--;
        else
          reset_DOW = 5;
        lcd.setCursor(0, 0);
        lcd.print("              ");
        lcd.setCursor(0, 0);
        lcd.print(days[reset_DOW]);
      }
      if (menu_selection == 1)
      {
        if (reset_time > 0)
          reset_time--;
        else
          reset_time = 11;
        lcd.setCursor(4, 1);
        lcd.print("  ");
        lcd.setCursor(4, 1);
        lcd.print(String(reset_time));
      }
      if (menu_selection == 2)
      {
        if (timings[reset_DOW][reset_time][0] > 0)
          timings[reset_DOW][reset_time][0]--;
        else
          timings[reset_DOW][reset_time][0] = 23;
        lcd.setCursor(8, 1);
        lcd.print("  ");
        lcd.setCursor(8, 1);
        lcd.print(String(timings[reset_DOW][reset_time][0]));
      }
      if (menu_selection == 3)
      {
        if (timings[reset_DOW][reset_time][1] > 0)
          timings[reset_DOW][reset_time][1]--;
        else
          timings[reset_DOW][reset_time][1] = 59;
        lcd.setCursor(11, 1);
        lcd.print("  ");
        lcd.setCursor(11, 1);
        lcd.print(String(timings[reset_DOW][reset_time][1]));
      }
    }
    else if (button_pressed == 'D')
    {
      if (menu_selection < 3)
        menu_selection++;
      else
        menu_selection = 0;
    }
    else if (button_pressed == 'B')
    {
      if (menu_selection > 0)
        menu_selection--;
      else
        menu_selection = 3;
    }
    else
    {
      reset_flag = false;
      lcd.clear();
    }
  }
}
